# /etc/nginx/conf.d/example.com.conf

server {
    server_name localhost;
    root /var/www/app/public;

    include /etc/nginx/conf.d/gzip.conf;

    # === AssetMapper (DEV) : laisser Symfony résoudre /assets/* via index.php ===
    # Le ^~ garantit que ce bloc passe AVANT les regex (.css|.js|...)
    location ^~ /assets/ {
    # en dev, tu peux désactiver le cache navigateur
    add_header Cache-Control "no-store, must-revalidate";
    try_files $uri =404;
    }

    # Fichiers statiques classiques (images, maps). On sert seulement s'ils existent.
    location ~* \.(jpg|jpeg|png|gif|ico|svg|map)$ {
        access_log off;
        try_files $uri =404;
    }

    # Si tu as des .css/.js physiques (hors AssetMapper), on les sert s'ils existent.
    # (Les assets AssetMapper passent de toute façon par le bloc /assets/ ci-dessus.)
    location ~* \.(css|js)$ {
        access_log off;
        try_files $uri =404;
    }

    # Fallback : on tente le fichier, sinon index.php
    location / {
        try_files $uri /index.php$is_args$args;
    }

    # Front controller
    location ~ ^/index\.php(/|$) {
        include /etc/nginx/conf.d/proxy.conf;

        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-Content-Type-Options "nosniff";
        add_header X-XSS-Protection "1; mode=block";

        fastcgi_pass unix:/var/run/php/www.sock;
        fastcgi_split_path_info ^(.+\.php)(/.*)$;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param DOCUMENT_ROOT $document_root;

        # cache headers côté proxy (conservé tel que dans ta conf)
        proxy_cache_valid 200 60m;
        proxy_cache_revalidate on;
        proxy_cache_use_stale error timeout updating;

        add_header ETag $upstream_http_etag;
        add_header Last-Modified $upstream_http_last_modified;

        internal;
    }

    # Bloque tout autre .php direct
    location ~ \.php$ {
        return 404;
    }

    # Sécurité : pas d'accès aux fichiers cachés
    location ~ /\.(?!well-known).* {
        deny all;
    }

    error_log  /dev/stderr  notice;  # warn/error si tu préfères
    access_log /dev/stdout;
}
